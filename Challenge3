/*----------------------------------------------------------------------------*/
/* */
/* Module: main.cpp */
/* Author: VEX */
/* Created: Thu Sep 26 2019 */
/* Description: Clawbot Competition Template */
/* */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Controller1          controller                    
// Motor15              motor         15              
// Drivetrain           drivetrain    1, 10           
// MotorGroup2          motor_group   2, 9            
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here

/*---------------------------------------------------------------------------*/
/* Pre-Autonomous Functions */
/* */
/* You may want to perform some actions before the competition starts. */
/* Do them in the following function. You must return from this function */
/* or the autonomous and usercontrol tasks will not be started. This */
/* function is only called once after the V5 has been powered on and */
/* not every time that the robot is disabled. */
/*---------------------------------------------------------------------------*/

void pre_auton(void) {
// Initializing Robot Configuration. DO NOT REMOVE!
vexcodeInit();

// All activities that occur before the competition starts
// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/* */
/* Autonomous Task */
/* */
/* This task is used to control your robot during the autonomous phase of */
/* a VEX Competition. */
/* */
/* You must modify the code to add your own robot specific commands here. */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
// ..........................................................................
// Insert autonomous user code here.
  Brain.Screen.print("Please save me from this suffering -Matt");
  //motorgroup spins to where the default point is 
  MotorGroup2.spinToPosition(0,degrees);
  Drivetrain.setStopping(hold);
  Drivetrain.setTimeout(3, seconds);
  Drivetrain.driveFor(forward, 30, inches);
  Drivetrain.setStopping(hold);
  Drivetrain.turnFor(right, 48, degrees);
  //after this line it turns right 
  Drivetrain.setTimeout(3, seconds);
  Drivetrain.setStopping(hold);
  Drivetrain.driveFor(forward, 25, inches);
  Drivetrain.turnFor(left, 52 ,degrees);
  //after this line it turns left "90 degrees"
  //now this is the hard part of where it rotates the forklift down drives forward and trys to pick the mobile goal up
  Drivetrain.setTimeout(3, seconds);
  Drivetrain.setStopping(hold);
  Drivetrain.driveFor(forward, 15,inches);
  Drivetrain.setTimeout(1, seconds);
  Drivetrain.setStopping(hold);
  MotorGroup2.spinFor(forward, 300 ,degrees);
  MotorGroup2.setTimeout(10, seconds);
  MotorGroup2.setStopping(hold);
  Drivetrain.driveFor(reverse, 500, inches);
  Drivetrain.turnFor(right, 2700 ,degrees);
  Drivetrain.setTimeout(10, seconds);
  Drivetrain.setStopping(hold);

//.................................
}

/*---------------------------------------------------------------------------*/
/* */
/* User Control Task */
/* */
/* This task is used to control your robot during the user control phase of */
/* a VEX Competition. */
/* */
/* You must modify the code to add your own robot specific commands here. */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
// User control code here, inside the loop
while (1) {
// This is the main execution loop for the user control program.
// Each time through the loop your program should update motor + servo
// values based on feedback from the joysticks.

// ........................................................................
// Insert user code here. This is where you use the joystick values to
// update your motors, etc.
// ........................................................................

wait(20, msec); // Sleep the task for a short amount of time to
// prevent wasted resources.
}
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
// Set up callbacks for autonomous and driver control periods.
Competition.autonomous(autonomous);
Competition.drivercontrol(usercontrol);

// Run the pre-autonomous function.
pre_auton();

// Prevent main from exiting with an infinite loop.
while (true) {
wait(100, msec);
}
}
